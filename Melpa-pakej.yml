/* tetingkap global */
(fungsi(m, dokumen, _, momen, Kuki){
  "gunakan ketat";

  // TODO Tunjukkan versi emacs yang serasi untuk sebarang pakej
  // TODO Google Analitis
  // Visualisasi TODO D3 untuk deps
  // TODO Undian / membintangi

  /////////////////////////////////////////////// ///////////////////////////
  // Pembantu
  /////////////////////////////////////////////// ///////////////////////////

  fungsi intersperse(seq, sep) {
    var res = seq.slice(0,1);
    for(var i=1; i <seq.length; ++i) {
      res.push(sep);
      res.push(seq[i]);
    }
    kembalikan semula;
  }

  fungsi addPropSetHook(prop, setter) {
    kembalikan fungsi(val) {
      if (arguments.length === 0)
        kembalikan prop();
      var ret = prop(val);
      setter(val);
      pulang ret;
    };
  }

  /////////////////////////////////////////////// ///////////////////////////
  // Model
  /////////////////////////////////////////////// ///////////////////////////

  var melpa = {};
  melpa.rootURL = window.location.protocol + "//" + window.location.host;

  melpa.Pakej = fungsi(data) {
    ["nama", "penerangan", "versi", "kebergantungan", "sumber", "komit",
     "muat turun", "fetcher", "recipeURL", "packageURL", "homeURL", "sourceURL", "oldNames"].map(function(p) {
      ini[p] = data[p];
    }.bind(this));
    this._searchText = _([data.name, data.description, data.version].concat(data.searchExtra || []))
      .compact().valueOf().join(' ').toLowerCase();
    this.logURL = "/packages/" + data.name + ".log";
    this.readmeURL = "/packages/" + data.name + "-readme.txt";
    this.badgeURL = "/packages/" + data.name + "-badge.svg";
    this.matchesTerm = function(term) {
      return _.every(term.split(' ').map(function(part) {
        kembalikan ini._searchText.indexOf(part) !== -1;
      }.bind(this)));
    };
  };

  melpa.PackageList = fungsi(pakej) {
    this.packages = pakej;
    this.totalDownloads = m.prop(packages.reduce(function (total, p) { return total + (p.downloads || 0); }, 0));
    this.totalPackages = m.prop(packages.length);
    var savedSearches = {};
    function preFilteredPackages(term) {
      var awalan = _(savedSearches).keys().filter(function(k) { return term.indexOf(k) === 0; }).sortBy('panjang').valueOf().reverse();
      kembalikan awalan.panjang > 0 ? savedSearches[prefixes[0]] : pakej;
    }
    this.matchingPackages = function(terms) {
      var t = terms.trim().toLowerCase();
      var padanan = savedSearches[t];
      jika (! sepadan) {
        padanan = savedSearches[t] = preFilteredPackages(t).penapis(fungsi(p) { return p.matchesTerm(t); });
      }
      kembali padanan;
    };
    var packagesByName = packages.reduce(function(packagesByName, p) {
      packagesByName[p.name] = p;
      if(p.oldNames) {
        _(p.oldNames).setiap(fungsi(n) { packagesByName[n] = p; });
      }
      kembali packagesByName;
    }, {});
    this.packageWithName = function(nama) {
      kembalikan packagesByName[name];
    };

    var downloadCounts = _.pluck(pakej, 'muat turun');
    this.downloadsPercentileForPackage = fungsi(p) {
      return downloadCounts.filter(function(d) { return d < p.downloads; }).length * 100.0 / downloadCounts.length;
    };

    this.dependenciesOnPackageName = function(packageName) {
      return packages.filter(function(p) {
        return _.findWhere(p.dependencies, {name: packageName});
      });
    };
  };

  /////////////////////////////////////////////// ///////////////////////////
  // Kumpul maklumat jauh tentang pakej
  /////////////////////////////////////////////// ///////////////////////////

  melpa.packageList = m.sync([
    m.request({method: 'GET', url: "/recipes.json"}),
    m.request({kaedah: 'DAPAT', url: "/archive.json"}),
    m.request({method: 'GET', url: "/download_counts.json"})
  ]).then(fungsi (maklumat) {
    var recipes = info[0], archive = info[1], downloads = info[2];

    var calculateSourceURL = function(nama, resipi, commit) {
      asas var, rujukan;
      if (recipe.fetcher == "github") {
        jika (resipi.repo.indexOf("/") != -1) {
          ref = commit || resipi.cawangan;
          kembalikan "https://github.com/" + recipe.repo +
            (rujuk ? "/tree/" + ruj : "");
        } lain {
          kembalikan "https://gist.github.com/" + recipe.repo;
        }
      } else if (recipe.fetcher == "gitlab") {
        base = "https://gitlab.com/" + recipe.repo;
        ref = commit || resipi.cawangan;
        kembalikan "https://gitlab.com/" + recipe.repo +
          (rujuk ? "/tree/" + ruj : "");
      } else if (recipe.fetcher == "bitbucket") {
        base = "https://bitbucket.com/" + recipe.repo;
        jika (komit) kembalikan pangkalan + "/src/" + komit;
        jika (resipi.cawangan) kembalikan pangkal + "/cawangan/" + resipi.cawangan;
        pangkalan balik;
      } else if (recipe.fetcher == "wiki") {
        kembalikan "http://www.emacswiki.org/emacs/" + nama + ".el";
      } else if (recipe.url) {
        var urlMatch = function(re, prefix) {
          var m = recipe.url.match(re);
          pulangkan m !== null ? (awalan || '') + m[1] : null;
        };
        return (urlMatch(/(bitbucket\.org\/[^\/]+\/[^\/\?]+)/, "https://") ||
                urlMatch(/(gitorious\.org\/[^\/]+\/[^.]+)/, "https://") ||
                urlMatch(/(gitlab\.com\/[^\/]+\/[^.]+)/, "https://") ||
                urlMatch(/^lp:(.*)/, "https://launchpad.net/") ||
                urlMatch(/^(https?:\/\/code\.google\.com\/p\/[^\/]+\/)/) ||
                urlMatch(/^(https?:\/\/[^.]+\.googlecode\.com\/)/) ||
                urlMatch(/^https:\/\/git\.code\.sf\.net\/p\/([^\/]+)/, "https://sourceforge.net/p/") ||
                urlMatch(/^(https?:\/\/git\..*)/));
      }
      kembali null;
    };

    var listed = _.intersection(_.keys(archive), _.keys(resipi));
    kembalikan melpa baru.PackageList(_(disenaraikan).reduce(function(pkgs, name) {
      var dibina = arkib[nama];
      var props = built.props || {};
      var recipe = resipi[nama];
      var version = built.ver.join(".");
      var deps = _.map(built.deps || [], fungsi (ver, nama) {
        kembalikan {nama: nama, versi: ver.join('.')};
      });
      var oldNames = resipi['nama-lama'] || [];
      var commit = props.commit;
      var sourceURL = calculateSourceURL(nama, resipi, komit);
      var homeURL = props.url || hitungSourceURL(nama, resipi, null);

      pkgs.push(melpa.Pakej baharu({
        nama: nama,
        versi: versi,
        beriltizam: beriltizam,
        tanggungan: deps,
        perihalan: built.desc.replace(/\s*\[((?:source: )?\w+)\]$/, ""),
        sumber: recipe.fetcher,
        muat turun: oldNames.concat(name).reduce(function(sum, n) { return sum + (muat turun[n] || 0); }, 0),
        pengambil: recipe.fetcher,
        recipeURL: "https://github.com/melpa/melpa/blob/master/recipes/" + nama,
        packageURL: "pakej/" + nama + "-" + versi + "." + (built.type == "single" ? "el" : "tar"),
        homeURL: homeURL,
        sourceURL: sourceURL,
        Nama lama: Nama lama,
        searchExtra: [recipe.repo]
      }));
      pulangkan pkgs;
    }, []));
  });

  /////////////////////////////////////////////// ///////////////////////////
  // Lihat pembantu
  /////////////////////////////////////////////// ///////////////////////////

  fungsi glyphicon(nama) {
    kembalikan m("span.glyphicon.glyphicon-" + nama);
  }

  function packageLink(pkg, contents) {
    kembalikan m("a", {href: "/" + encodeURIComponent(pkg.name), konfigurasi: m.route},
             kandungan || pkg.name);
  }

  function packagePath(pkg) {
    jika (m.route.mode !== "hash") buang "FIXME: mod laluan tidak disokong";
    kembalikan "/#/" + encodeURIComponent(pkg.name);
  }

  /////////////////////////////////////////////// ///////////////////////////
  // Penomboran
  /////////////////////////////////////////////// ///////////////////////////

  melpa.paginator = {};
  melpa.paginator.controller = function(getItemList) {
    this.pageLength = m.prop(50);
    this.windowSize = m.prop(7);
    this.pageNumber = m.prop(1);
    this.paginatedItems = function() {
      jika (this.pageNumber() !== null) {
        kembalikan getItemList().slice(this.pageLength() * (this.pageNumber() - 1),
                                  this.pageLength() * this.pageNumber());
      } lain {
        kembalikan getItemList();
      }
    };
    this.maxPage = function() {
      return Math.ceil(getItemList().length / this.pageLength());
    };
    this.prevPages = function() {
      return _.last(_.range(1, this.pageNumber()),
                    Math.floor((this.windowSize() - 1) / 2));
    };
    this.nextPages = function() {
      return _.first(_.range(this.pageNumber() + 1, 1 + this.maxPage()),
                     this.windowSize() - 1 - this.prevPages().length);
    };
  };

  melpa.paginator.view = function(ctrl) {
    var prevPage = _.last(ctrl.prevPages());
    var nextPage = _.first(ctrl.nextPages());
    var pageLinkAttrs = function(n) {
      kembali n ? { onclick: function(){ ctrl.pageNumber(n); } } : {};
    };
    var pageLink = function(n) {
      kembalikan m("li", m("a", pageLinkAttrs(n), m("span", n)));
    };
    kembalikan m("nav",
             m("ul.penomboran", [
               m("li", { class: (prevPage ? "" : "disabled") },
                 m("a", pageLinkAttrs(prevPage), [
                   m("span", {"aria-hidden": "true"}, m.trust("«")),
                   m("span.sr-only", "Sebelumnya")
                 ])),
               ctrl.prevPages().map(pageLink),
               m("li.active", m("a", m("span", [ctrl.pageNumber(), " ", m("span.sr-only", "(current)")]))) ,
               ctrl.nextPages().map(pageLink),
               m("li", { class: (NextPage ? "" : "disabled") },
                 m("a", pageLinkAttrs(nextPage), [
                   m("span", {"aria-hidden": "true"}, m.trust("»")),
                   m("span.sr-sahaja", "Seterusnya")
                 ]))
             ]));
  };

  /////////////////////////////////////////////// ///////////////////////////
  // Senarai pakej
  /////////////////////////////////////////////// ///////////////////////////

  melpa.packagelist = {};
  melpa.packagelist.controller = function() {
    var defaultQueryParams = {q: '', sort: 'name', asc: true, page: 1};
    var queryParams = {
      q: m.route.param('q') || defaultQueryParams.q,
      isihan: m.route.param('sort') || defaultQueryParams.sort,
      asc: m.route.param('asc') ? (m.route.param('asc') == 'true'): defaultQueryParams.asc
    };
    var resetPagination = function() { this.paginatorCtrl.pageNumber(1); }.bind(this);
    var updateRoute = function() {
      queryParams = {
        q: this.filterTerms(),
        sort: this.sortBy(),
        asc: this.sortAscending()
      };
      bahagian var = [];
      untuk (var k dalam queryParams) {
        jika (queryParams[k] !== defaultQueryParams[k]) {
          parts.push(k + "=" + encodeURIComponent(queryParams[k]));
        }
      }
      history.replaceState({},"", "/#/" + (parts.length > 0 ? "?" + parts.join("&") : ""));
    }.bind(this);

    this.filterTerms = addPropSetHook(addPropSetHook(m.prop(queryParams.q), resetPagination), updateRoute);
    this.sortBy = addPropSetHook(m.prop(queryParams.sort), updateRoute);
    this.sortAscending = addPropSetHook(m.prop(queryParams.asc), updateRoute);
    this.packageList = melpa.packageList;
    this.matchingPackages = function() {
      kembalikan this.packageList().matchingPackages(this.filterTerms());
    };
    this.sortedPackages = function() {
      var pkgs = _.sortBy(this.matchingPackages(), this.sortBy());
      jika (!this.sortAscending())
        pkgs = pkgs.reverse();
      pulangkan pkgs;
    }.bind(this);
    this.toggleSort = function(medan) {
      if (this.sortBy() == medan) {
        this.sortAscending(!this.sortAscending());
      } lain {
        this.sortAscending(true);
        this.sortBy(field);
      }
      resetPagination();
    };
    this.wantPagination = function() {
      return !Cookies.get("nopagination");
    };
    this.togglePagination = function() {
      jika (this.wantPagination()) {
        Cookies.set("nopaginasi", "1");
      } lain {
        Cookies.expire("nopaginasi");
      }
    };
    this.paginatorCtrl = melpa.paginator.controller baharu(this.sortedPackages);
  };

  melpa.packagelist.view = function(ctrl) {
    var sortToggler = function(medan) {
      return function() { return ctrl.toggleSort(field); };
    };
    var sortIndicator = function(medan) {
      return glyphicon((field != ctrl.sortBy()) ? "tolak" : (ctrl.sortAscending() ? "chevron-down" : "chevron-up"));
    };
    kembalikan m("bahagian#pakej", [
      m("h2", [
        "Senarai Semasa",
        ctrl.packageList().totalPackages().toLocaleString(),
        "Pakej",
        m("kecil", [
          ctrl.packageList().totalDownloads().toLocaleString(),
          "muat turun setakat ini"
        ])
      ]),
      m("p", [
        m("input.form-control[type=search]", {
          pemegang tempat: "Masukkan istilah penapis", autofokus: benar,
          nilai: ctrl.filterTerms(), onkeyup: m.withAttr("value", ctrl.filterTerms)
        }),
        " ",
        m("span.help-block", [ctrl.matchingPackages().length, " padanan pakej(s)"])
      ]),
      m("table#package-list.table.table-bordered.table-responsive.table-hover", [
        m("kepala", [
          m("tr", [
            m("th.sortable", {onclick: sortToggler("name")}, ["Pakej", sortIndicator("nama")]),
            m("th.sortable", {onclick: sortToggler("description")}, ["Description", sortIndicator("description")]),
            m("th.sortable", {onclick: sortToggler("version")}, ["Version", sortIndicator("version")]),
            m("th", "Resipi"),
            m("th.sortable", {onclick: sortToggler("fetcher")}, ["Source", sortIndicator("fetcher")]),
            m("th.sortable", {onclick: sortToggler("muat turun")}, ["DLs", sortIndicator("muat turun")]),
          ])
        ]),
        m("badan",
          (ctrl.wantPagination() ? ctrl.paginatorCtrl.paginatedItems() : ctrl.sortedPackages()).map(function(p) {
            kembalikan m("tr", { kunci: p.name }, [
              m("td", packageLink(p)),
              m("td", packageLink(p, p.description)),
              m("td.version", m("a", {href: p.packageURL}, [p.version, " ", glyphicon('muat turun')])),
              m("td.resipi",
                m("a", {href: p.recipeURL}, glyphicon('kutleri'))),
              m("td.source",
                p.sourceURL ? m("a", {href: p.sourceURL}, p.source): p.source),
              m("td", [p.downloads.toLocaleString()])
            ]);
          }))
      ]),
      (ctrl.wantPagination() ? melpa.paginator.view(ctrl.paginatorCtrl) : null),
      m("kecil",
        m("a", {onclick: ctrl.togglePagination.bind(ctrl)},
          (ctrl.wantPagination() ? "Lumpuhkan penomboran (mungkin melambatkan paparan)" : "Dayakan penomboran")
         ))
    ]);
  };

  /////////////////////////////////////////////// ///////////////////////////
  // Butiran pakej
  /////////////////////////////////////////////// ///////////////////////////

  melpa.packagedetails = {};
  melpa.packagedetails.controller = function() {
    var ctrl = {
      Nama pakej: m.route.param("pakej"),
      pakej: m.prop(),
      readme: m.prop('Tiada penerangan tersedia.'),
      buildLog: m.prop(),
      diperlukanOleh: m.prop([]),
      muat turunPercentile: m.prop(0),
      nama arkib: new melpa.archivename.controller()
    };
    ctrl.title = ctrl.packageName;
    melpa.packageList.then(function(packageList) {
      var p = packageList.packageWithName(ctrl.packageName);
      jika (!p) kembali;
      ctrl.package(p);
      ctrl.downloadsPercentile(packageList.downloadsPercentileForPackage(p));
      ctrl.neededBy(_.sortBy(packageList.dependenciesOnPackageName(ctrl.packageName), 'name'));
      ctrl.packageWithName = packageList.packageWithName;
      m.request({method: "GET",
                 url: p.readmeURL,
                 deserialize: _.identiti
                }).then(ctrl.readme);
      ctrl.fetchBuildLog = function() {
        ctrl.buildLog("Memuatkan")
        m.request({method: "GET",
                   url: p.logURL,
                   deserialize: _.identiti
                  }).then(ctrl.buildLog);
      };
    });
    kembali ctrl;
  };

  melpa.packagedetails.view = function(ctrl) {
    var pkg = ctrl.package();
    jika (!pkg) kembalikan m("h1", ["Pakej tidak ditemui: ", ctrl.packageName]);
    this.depLink = function(dep) {
      var depPkg = ctrl.packageWithName(dep.name);
      var label = dep.name + " " + dep.version;
      pulangkan depPkg ? packageLink(depPkg, label): label;
    };
    this.reverseDepLink = function(dep) {
      var depPkg = ctrl.packageWithName(dep.name);
      pulangkan depPkg ? packageLink(depPkg, dep.name): dep.name;
    };
    var badgeURL = melpa.rootURL + pkg.badgeURL;
    var fullURL = melpa.rootURL + packagePath(pkg);

    kembalikan m("bahagian", [
      m("h1", [pkg.name, " ", m("kecil", pkg.version)]),
      m("p.lead", pkg.description),
      m("p", [
        m("a.btn.btn-default", {href: pkg.recipeURL}, [glyphicon('kutleri'), " Resipi"]), ' ',
        m("a.btn.btn-default", {href: pkg.packageURL}, [glyphicon('muat turun'), " Muat turun"]), ' ',
        (pkg.sourceURL ? m("a.btn.btn-default", {href: pkg.sourceURL}, [glyphicon('folder-open'), " Source code"]): ''), ' ',
        (pkg.homeURL ? m("a.btn.btn-default", {href: pkg.homeURL}, [glyphicon('home'), " Homepage"]) : '')
      ]),
      m("bahagian", [
        m(".baik", [
          m("dl.dl-mendatar", [
            m("dt", "Muat turun"),
            m("dd", [
              pkg.downloads.toLocaleString(),
              m("span.muted", " (semua versi)"),
              ", persentil: ",
              ctrl.downloadsPercentile().toFixed(2)
            ]),
            m("dt", "Sumber"),
            m("dd", [
              pkg.sourceURL ? m("a", {href: pkg.sourceURL}, pkg.source): pkg.source,
              pkg.commit ? m("span.muted", " (commit " + pkg.commit.substring(0,6) + ")") : []
            ]),
            m("dt", "Pergantungan"),
            m("dd", intersperse(_.sortBy(pkg.dependencies, 'name').map(this.depLink), " / ")),
            m("dt", "Diperlukan oleh"),
            m("dd", intersperse(ctrl.neededBy().map(this.reverseDepLink), " / ")),
            pkg.oldNames.length > 0 ? [
              m("dt", "Dinamakan semula daripada:"),
              m("dd", intersperse(pkg.oldNames, ', '))
            ] : []
          ])
        ])
      ]),
      m("bahagian", [
        m("h4", "Penerangan"),
        m("pra", ctrl.readme())
      ]),
      m("bahagian",
        m("h4", "Kod lencana"),
        m(".baik", [
          m("dl", [
            m("dt", "Pratonton"),
            m("dd", packageLink(pkg, m("img", {alt: ctrl.archivename.archiveName(), src: melpa.rootURL + pkg.badgeURL})))
          ]),
          m("dl", [
            m("dt", "HTML"),
            m("dd", m("pre", '<a href="' + fullURL + '"><img alt="' + ctrl.archivename.archiveName() + '" src="' + badgeURL + ' "/></a>')),
            m("dt", "Markdown"),
            m("dd", m("pra", "[![" + ctrl.archivename.archiveName() + "](" + badgeURL + ")](" + fullURL + ")")),
            m("dt", "Org"),
            m("dd", m("pra", '[[' + fullURL + '][file:' + badgeURL + ']]'))
          ])
        ])),
      m("bahagian", [
        m("h4", "Bina log"),
        (ctrl.buildLog() ? m("pre", ctrl.buildLog()): m("a.btn.btn-default", {onclick: ctrl.fetchBuildLog}, "Show"))
      ])
    ]);
  };


  /////////////////////////////////////////////// ///////////////////////////
  // Menunjukkan masa binaan terakhir
  /////////////////////////////////////////////// ///////////////////////////

  melpa.buildstatus = {};
  melpa.buildstatus.controller = function() {
    this.started = m.prop();
    this.completed = m.prop();
    this.duration = m.prop();
    this.next = m.prop();
    this.running = function() { return !this.completed(); }.bind(this);

    m.request({method: 'GET', url: "/build-status.json", background: true})
      .then(function(status){
        m.startComputation();
        this.started(maybeDate(status.started));
        this.completed(maybeDate(status.completed));
        this.next(maybeDate(status.next));
        this.duration(status.duration);
        m.endComputation();
      }.bind(this));
    fungsi maybeDate(v) { return v ? new Date(v * 1000): null; }
  };
  melpa.buildstatus.view = function(ctrl) {
    fungsi reltime(t) {
      pulangkan t ? moment(t).fromNow() : "tidak diketahui";
    }
    tempoh fungsi() {
      kembalikan ctrl.duration() ?
        moment.duration(ctrl.duration(), 'seconds').humanize() :
        "jumlah masa yang tidak diketahui";
    }
    jika (ctrl.running()) {
      kembalikan m(".alert.alert-warning", [
        m("kuat", "Binaan semasa dimulakan:"),
        m("span", [reltime(ctrl.started())]),
        m("span", [", terakhir mengambil ", duration()])
      ]);
    } lain {
      kembalikan m(".alert.alert-success", [
        m("kuat", "Binaan seterusnya: "),
        m("span", [reltime(ctrl.next())]),
        m("span", [", last ended ", reltime(ctrl.completed()),
                   " dan mengambil ", tempoh()])
      ]);
    }
  };


  /////////////////////////////////////////////// ///////////////////////////
  // Menukar rupa halaman MELPA Stable
  /////////////////////////////////////////////// ///////////////////////////

  melpa.sites = {
    tidak stabil: { nama: "MELPA", hos: ["melpa.org"] },
    stabil: { nama: "MELPA Stable", hos: ["stable.melpa.org", "stable-test.melpa.org"] }
  };

  melpa.stable = m.prop(_.findIndex(melpa.sites.stable.hosts,
                                    function(s) { return s == window.location.host.toLowerCase(); }) != -1);
  melpa.archivename = {};
  melpa.archivename.controller = function() {
    this.archiveName = function() {
      kembalikan melpa.stable() ? melpa.sites.stable.name : melpa.sites.unstable.name;
    };
  };
  melpa.archivename.view = function(ctrl) {
    kembalikan m("span", ctrl.archiveName());
  };

  document.addEventListener("DOMContentLoaded", function() {
    document.title = (new melpa.archivename.controller()).archiveName();
    _.each(document.getElementsByClassName('archive-name'), function (e) {
      // jshint unused: false
      m.mount(e, melpa.archivename);
    });

    if (melpa.stable()) {
      document.getElementsByTagName("html")[0].className += " stable";
    }

    // Add a link to the other MELPA site
    var otherSite = melpa.stable() ? melpa.sites.unstable : melpa.sites.stable;
    var otherSiteLink = document.getElementsByClassName("other-melpa-link")[0];
    otherSiteLink.href = "//" + otherSite.hosts[0];
    otherSiteLink.textContent = otherSite.name;
    otherSiteLink.classList.remove("hidden");
  });

  //////////////////////////////////////////////////////////////////////////////
  // Static pages
  //////////////////////////////////////////////////////////////////////////////

  melpa.staticpage = function(partialPath, title) {
    return {
      controller: function() {
        this.content = m.prop('');
        this.title = title;
        m.request({method: "GET", url: partialPath,
                   deserialize: _.identity
                  }).then(this.content);
      },
      view: function(ctrl) {
        return m("div", [m.trust(ctrl.content())]);
      }
    };
  };


  //////////////////////////////////////////////////////////////////////////////
  // Front page
  //////////////////////////////////////////////////////////////////////////////

  melpa.frontpage = {};
  melpa.frontpage.controller = function() {
    this.packagelist = new melpa.packagelist.controller();
    this.buildstatus = new melpa.buildstatus.controller();
    this.archivename = new melpa.archivename.controller();
  };
  melpa.frontpage.view = function(ctrl) {
    return m("div", [
      m("section.page-header", [
        m("h1", [
          melpa.archivename.view(ctrl.archivename),
          m("small", " (Milkypostman’s Emacs Lisp Package Archive)")
        ])
      ]),
      m(".row", [
        m(".col-md-8", [
          m("section.jumbotron", [
            m("ul", [
              "<strong>Up-to-date packages built on our servers from upstream source</strong>",
              "<strong>Installable in any Emacs with 'package.el'</strong> - no local version-control tools needed",
              "<strong>Curated</strong> - no obsolete, renamed, forked or randomly hacked packages",
              "<strong>Comprehensive</strong> - more packages than any other archive",
              "<strong>Automatic updates</strong> - new commits result in new packages",
              "<strong>Extensible</strong> - contribute new recipes, and we'll build the packages"
            ].map(function(content) { return m("li", m.trust(content)); }))
          ])
        ]),
        m(".col-md-4", [
          melpa.buildstatus.view(ctrl.buildstatus),
        ])
      ]),
      melpa.packagelist.view(ctrl.packagelist)
    ]);
  };


  //////////////////////////////////////////////////////////////////////////////
  // Titled pages
  //////////////////////////////////////////////////////////////////////////////

  melpa.currentPageTitle = m.prop();

  melpa.titledPage = function(module) {
    return {
      controller: function() {
        var ctrl = new (Function.prototype.bind.apply(module.controller, arguments));
        var t = ctrl.title;
        melpa.currentPageTitle(typeof t === "function" ? t() : t);
        return ctrl;
      },
      view: module.view
    };
  };

  melpa.titleComponent = {
    controller: function() {
      this.archivename = new melpa.archivename.controller();
    },
    view: function(ctrl) {
      return _.compact([melpa.currentPageTitle(), ctrl.archivename.archiveName()]).join(" - ");
    }
  };

  var titleElem = document.querySelector("title");
  titleElem.textContent = "";
  m.module(titleElem, melpa.titleComponent);

  //////////////////////////////////////////////////////////////////////////////
  // Routing
  //////////////////////////////////////////////////////////////////////////////
  melpa.gettingstarted = melpa.staticpage("/partials/getting-started.html", "Getting Started");

  m.route.mode = "hash";
  m.route(document.getElementById("content"), "/", {
    "/": melpa.titledPage(melpa.frontpage),
    "/getting-started": melpa.titledPage(melpa.gettingstarted),
    "/:package": melpa.titledPage(melpa.packagedetails)
  });
})(window.m, window.document, window._, window.moment, window.Cookies);
